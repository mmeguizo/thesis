datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum UserRole {
  ADMIN
  STUDENT
  TEACHER
}

model User {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  username  String   @unique
  password  String
  firstName String?
  lastName  String?
  avatar    String?
  isActive  Boolean  @default(true)
  role      UserRole @default(STUDENT)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // RELATIONS
  userLessons   UserLesson[]
  userBadges    UserBadge[]
  userQuestions UserQuestion[]
}

model Subject {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String   @unique
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  gradeLevel Int
  // RELATIONS
  lessons      Lesson[]
  // question     Question[]
  UserQuestion UserQuestion[]
}

model Lesson {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  title     String
  level     Int
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // RELATIONS
  subjectId   String       @db.ObjectId
  subject     Subject      @relation(fields: [subjectId], references: [id])
  questions   Question[]
  userLessons UserLesson[]
}

model Question {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  lessonId      String   @db.ObjectId
  question      String
  answer        String
  hint          String?
  tutorialLink  String?
  questionLevel Int
  isActive      Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  timeLimit     Int? // Time limit in seconds (null if no time limit) // Time limit in seconds (e.g., 180 = 3 minutes)
  difficulty    String
  // RELATIONS
  // subjectId     String         @db.ObjectId
  lesson        Lesson         @relation(fields: [lessonId], references: [id])
  // subject       Subject        @relation(fields: [lessonId], references: [id])
  userQuestions UserQuestion[]
}

model UserQuestion {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  userId     String   @db.ObjectId
  questionId String   @db.ObjectId
  subjectId  String   @db.ObjectId
  starRating Int? // 0, 1, 2, 3 (null if not completed)
  timeSpent  Int?
  isCorrect  Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  // RELATIONS
  user       User     @relation(fields: [userId], references: [id])
  subject    Subject  @relation(fields: [subjectId], references: [id])
  question   Question @relation(fields: [questionId], references: [id])
}

model UserLesson {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  userId     String   @db.ObjectId
  lessonId   String   @db.ObjectId
  totalStars Int      @default(0) // Sum of all stars from questions
  completed  Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // RELATIONS
  user   User   @relation(fields: [userId], references: [id])
  lesson Lesson @relation(fields: [lessonId], references: [id])
}

model Badge {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String // Bronze, Silver, Gold
  description String?
  minStars    Int // Required stars for this badge
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // RELATIONS
  userBadges UserBadge[]
}

model UserBadge {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  badgeId   String   @db.ObjectId
  earnedAt  DateTime @default(now())
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // RELATIONS
  user  User  @relation(fields: [userId], references: [id])
  badge Badge @relation(fields: [badgeId], references: [id])
}
